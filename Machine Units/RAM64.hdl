// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    //Using bits 0..2 as tag bits that can uniquely identifies 8 blocks (assuming that the RAM is full-associative)
    //,each block size is 8 since it is RAM8 so 3..5 bits will define the offset
    DMux8Way(in=load , sel=address[0..2] , a=a , b=b , c=c , d=d , e=e , f=f , g=g , h=h ); 
    
    //Using bits 0..2 as offset bits
    RAM8(in=in , load=a , address=address[3..5] , out=out0 );
    RAM8(in=in , load=b , address=address[3..5] , out=out1 );
    RAM8(in=in , load=c , address=address[3..5] , out=out2 );
    RAM8(in=in , load=d , address=address[3..5] , out=out3 );
    RAM8(in=in , load=e , address=address[3..5] , out=out4 );
    RAM8(in=in , load=f , address=address[3..5] , out=out5 );
    RAM8(in=in , load=g , address=address[3..5] , out=out6 );
    RAM8(in=in , load=h , address=address[3..5] , out=out7 );

    Mux8Way16(a=out0 , b=out1 , c=out2 , d=out3 , e=out4 , f=out5 , g=out6 , h=out7 , sel=address[0..2] , out=out );

}